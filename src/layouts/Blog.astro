---

---
<div class = "content">
    <slot></slot>
    <br/>
</div>

<!--Note: If the content div isnt there then the styles for the blogs dont work -->

<style is:inline>
    * {
        font-family: "IBM Plex Mono", monospace;
        line-height: 1.5;
	    letter-spacing: .2px;
    }

    h1{
      font-size:1.5rem;
    }

    h2{
      font-size:1.4rem;
    }

    h3{
      font-size:1.3rem;
    }

    p{
        font-size: 0.9rem;
        margin: 10px 0;
    }
    
    a{
        font-size: 1rem;
    }
    
   

</style>


<script>
  let audioContext: AudioContext | undefined;
  let audioBuffer: AudioBuffer | undefined;
  let sourceNode: AudioBufferSourceNode | undefined;

  document.addEventListener('DOMContentLoaded', () => {
      audioContext = new AudioContext(); // Initialize AudioContext directly

      let isDecrypting = false;

      async function loadAudio(): Promise<void> {
          const audioUrl = 'https://audio.jukehost.co.uk/EqW6fci0a87uV7WFDGz3mTC3u0CDBONk';
          try {
              const response = await fetch(audioUrl);
              const arrayBuffer = await response.arrayBuffer();
              if (audioContext) {
                  audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
              }
          } catch (error) {
              console.error('Error loading or decoding audio:', error);
          }
      }

      function playAudio(): void {
          if (audioContext && audioBuffer) {
              sourceNode = audioContext.createBufferSource();
              sourceNode.buffer = audioBuffer;
              sourceNode.connect(audioContext.destination);
              sourceNode.loop = true;
              sourceNode.start();
          }
      }

      function stopAudio(): void {
          if (sourceNode) {
              sourceNode.stop();
          }
      }

      function getRandomChar(): string {
          const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*';
          return chars.charAt(Math.floor(Math.random() * chars.length));
      }

      async function decryptText(element: Element, originalText: string): Promise<void> {
          if (isDecrypting) return;
          isDecrypting = true;

          await loadAudio();
          let currentText = Array(originalText.length).fill('').map(getRandomChar).join('');
          if (element instanceof HTMLElement) {
              element.textContent = currentText;
          }

          playAudio();

          let index = 0;
          const interval = setInterval(() => {
              if (index >= originalText.length) {
                  clearInterval(interval);
                  stopAudio();
                  isDecrypting = false;
                  return;
              }

              currentText = currentText.split('').map((_, i) => {
                  if (i < index) return originalText[i];
                  if (i === index) return originalText[i];
                  return getRandomChar();
              }).join('');

              if (element instanceof HTMLElement) {
                  element.textContent = currentText;
              }
              index++;
          }, 15); // Adjust speed here (lower number = faster)
      }

      function handlePageLoad(): void {
          const h1 = document.querySelector('h1');
          if (h1) {
              const originalText = h1.textContent || '';
              decryptText(h1, originalText);
          }
      }

      window.addEventListener('DOMContentLoaded', handlePageLoad);

      function cleanUp(): void {
          stopAudio();
          isDecrypting = false;
      }

      window.addEventListener('pagehide', cleanUp);
  });
</script>
